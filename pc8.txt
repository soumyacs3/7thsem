#include &lt;mpi.h&gt;
#include &lt;stdio.h&gt;
int main(int argc, char** argv) {
int rank, size;
int data[100]; // Only used by root
int recv_value; // Value received by each process
int gathered[100]; // Only used by root
// Initialize MPI
MPI_Init(&amp;argc, &amp;argv);
// Get rank and size
MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);
MPI_Comm_size(MPI_COMM_WORLD, &amp;size);
// Only rank 0 initializes data
if (rank == 0) {
for (int i = 0; i &lt; size; i++) {
data[i] = i * 10;
}
printf(&quot;Process 0 initialized data: &quot;);
for (int i = 0; i &lt; size; i++) {
printf(&quot;%d &quot;, data[i]);
}
printf(&quot;\n&quot;);
}
// SCATTER: One value from `data` array is sent to each process
MPI_Scatter(data, 1, MPI_INT, &amp;recv_value, 1, MPI_INT, 0, MPI_COMM_WORLD);
printf(&quot;Process %d received value %d from Scatter\n&quot;, rank, recv_value);
// Each process modifies its value
recv_value += rank;
// GATHER: Each process sends modified value back to root

MPI_Gather(&amp;recv_value, 1, MPI_INT, gathered, 1, MPI_INT, 0, MPI_COMM_WORLD);
// Only rank 0 displays gathered results
if (rank == 0) {
printf(&quot;Process 0 gathered data: &quot;);
for (int i = 0; i &lt; size; i++) {
printf(&quot;%d &quot;, gathered[i]);
}
printf(&quot;\n&quot;);
}
// Finalize
MPI_Finalize();
return 0;
}




Now For Compilation
mpicc sg.c -o sg
For execution
mpirun â€“oversubscribe --np 4 ./sg