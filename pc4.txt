#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;omp.h&gt;
#include &lt;math.h&gt;
int is_prime(int num) {
if (num &lt; 2) return 0;
if (num == 2) return 1;
if (num % 2 == 0) return 0;
int limit = sqrt(num);
for (int i = 3; i &lt;= limit; i += 2) {
if (num % i == 0) return 0;
}
return 1;

}
int main() {
int n;
printf(&quot;Enter value of n: &quot;);
scanf(&quot;%d&quot;, &amp;n);
double start_time, end_time;
// Serial Execution
start_time = omp_get_wtime();
int serial_count = 0;
for (int i = 2; i &lt;= n; i++) {
if (is_prime(i)) serial_count++;
}
end_time = omp_get_wtime();
printf(&quot;Serial Execution Time: %f seconds\n&quot;, end_time - start_time);
// Parallel Execution
omp_set_num_threads(4); // Set based on CPU
int* prime_flags = (int*)calloc(n + 1, sizeof(int));
start_time = omp_get_wtime();
#pragma omp parallel for schedule(dynamic, 100)
for (int i = 2; i &lt;= n; i++) {
if (is_prime(i)) {
prime_flags[i] = 1;
}
}
end_time = omp_get_wtime();
int parallel_count = 0;
for (int i = 2; i &lt;= n; i++) {
if (prime_flags[i]) parallel_count++;
}
printf(&quot;Parallel Execution Time: %f seconds\n&quot;, end_time - start_time);
printf(&quot;Primes found (Serial): %d, (Parallel): %d\n&quot;, serial_count, parallel_count);
free(prime_flags);
return 0;
}
