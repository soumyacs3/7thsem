#include &lt;mpi.h&gt;
#include &lt;stdio.h&gt;
int main(int argc, char** argv) {
int rank, send_data, recv_data;
MPI_Init(&amp;argc, &amp;argv);
MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);
send_data = (rank == 0) ? 100 : 200;
if (rank == 0) {
printf(&quot;Process 0: Before Send\n&quot;);
fflush(stdout);
MPI_Send(&amp;send_data, 1, MPI_INT, 1, 0, MPI_COMM_WORLD); // blocking send
printf(&quot;Process 0: After Send, Before Recv\n&quot;);
fflush(stdout);
MPI_Recv(&amp;recv_data, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
printf(&quot;Process 0: Received %d\n&quot;, recv_data);
fflush(stdout);
} else if (rank == 1) {
printf(&quot;Process 1: Before Send\n&quot;);
fflush(stdout);
MPI_Send(&amp;send_data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD); // blocking send
printf(&quot;Process 1: After Send, Before Recv\n&quot;);
fflush(stdout);
MPI_Recv(&amp;recv_data, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

printf(&quot;Process 1: Received %d\n&quot;, recv_data);
fflush(stdout);
}
MPI_Finalize();
return 0;
}
