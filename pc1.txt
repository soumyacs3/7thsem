#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;omp.h&gt;
#include &lt;time.h&gt;

#define SIZE 100000 // You can change this to test with larger arrays

void merge(int arr[], int l, int m, int r) {
int i, j, k;
int n1 = m - l + 1;
int n2 = r - m;

int *L = (int *)malloc(n1 * sizeof(int));
int *R = (int *)malloc(n2 * sizeof(int));

for (i = 0; i &lt; n1; i++) L[i] = arr[l + i];
for (j = 0; j &lt; n2; j++) R[j] = arr[m + 1 + j];

i = 0; j = 0; k = l;
while (i &lt; n1 &amp;&amp; j &lt; n2)
arr[k++] = (L[i] &lt;= R[j]) ? L[i++] : R[j++];

while (i &lt; n1) arr[k++] = L[i++];
while (j &lt; n2) arr[k++] = R[j++];

free(L);
free(R);
}

void mergeSortSeq(int arr[], int l, int r) {
if (l &lt; r) {

int m = (l + r) / 2;
mergeSortSeq(arr, l, m);
mergeSortSeq(arr, m + 1, r);
merge(arr, l, m, r);
}
}

void mergeSortParallel(int arr[], int l, int r) {
if (r - l &lt; SIZE){
mergeSortSeq(arr, l, r); // Use sequential for small problems
} else if (l &lt; r) {
int m = (l + r) / 2;
#pragma omp parallel sections
{
#pragma omp section
mergeSortParallel(arr, l, m);

#pragma omp section
mergeSortParallel(arr, m + 1, r);
}
merge(arr, l, m, r);
}
}

void fillArray(int arr[], int size) {
for (int i = 0; i &lt; size; i++)
arr[i] = rand() % 100000;
}

void copyArray(int src[], int dest[], int size) {
for (int i = 0; i &lt; size; i++)

dest[i] = src[i];
}

int main() {
int *a1 = (int *)malloc(SIZE * sizeof(int));
int *a2 = (int *)malloc(SIZE * sizeof(int));
double start, end;

fillArray(a1, SIZE);
copyArray(a1, a2, SIZE);

// Sequential Merge Sort
start = omp_get_wtime();
mergeSortSeq(a1, 0, SIZE - 1);
end = omp_get_wtime();
printf(&quot;Sequential Merge Sort Time: %.6f seconds\n&quot;, end - start);

// Parallel Merge Sort
start = omp_get_wtime();
mergeSortParallel(a2, 0, SIZE - 1);
end = omp_get_wtime();
printf(&quot;Parallel Merge Sort Time: %.6f seconds\n&quot;, end - start);

free(a1);
free(a2);
return 0;
}
